{
  "name": "RepoXplorer",
  "tagline": "RepoXplorer is a small stats and charts utility for GIT repositories",
  "body": "# RepoXplorer\r\n\r\nRepoXplorer is a small stats and charts utility for Git repositories.\r\nIts main purpose is to ease the visualization of stats for one or\r\nmore project(s) composed of multiple Git repositories.\r\n\r\nAs lot of projects are composed of multiple Git repositories (server,\r\nclient, libraries). RepoXplorer let's you describe how a project is composed\r\nand then computes stats across multiple them.\r\n\r\nFurthermore it is possible to define author identities by listing\r\nauthor emails and then avoid duplicated authors in the computed stats.\r\n\r\nRepoXplorer relies on ElasticSearch. Only a Web browser is needed to access\r\nthe user interface.\r\n\r\n## A visual overview of the user interface\r\n\r\n![capture 1](https://raw.githubusercontent.com/morucci/repoxplorer/master/imgs/repoxplorer.jpg)\r\n\r\n## How to install\r\n\r\nFirst install repoXplorer in a virtualenv.\r\n\r\n```Shell\r\nvirtualenv ~/repoxplorer\r\n. ~/repoxplorer/bin/activate\r\npip install -r requirements.txt\r\npython setup.py install\r\n```\r\n\r\nInstall Elasticsearch. Here, we use an already \"ready to use\" Docker\r\ncontainer. But you should definitely use a regular installation\r\nof ElasticSearch.\r\n\r\n```Shell\r\n~/repoxplorer/bin/el-start.sh\r\n```\r\n\r\n## How to index a list of Git hosted projects\r\n\r\nA yaml file should be provisioned with the projects you want to index. The\r\nfile $prefix/local/share/repoxplorer/projects.yaml is expected to be found.\r\n\r\nBelow is the default projects.yaml file provided. Note that Barbican project\r\nis composed of two Git repositories: the server and the client.\r\n\r\nA list of tags can be given to each Git repositories. This tag notion\r\nshould not be considered as Git tags but only as a way to group\r\nGit repositories together.\r\n\r\nEdit this file to add projects you want to index.\r\n~/repoxplorer/local/share/repoxplorer/projects.yaml.\r\n\r\n```YAML\r\n---\r\ntemplates:\r\n- name: default\r\n  uri: https://github.com/openstack/%(name)s\r\n  branch: master\r\n  gitweb: https://github.com/openstack/%(name)s/commit/%%(sha)s\r\n\r\nprojects:\r\n  Barbican:\r\n  - name: barbican\r\n    tags:\r\n      - python\r\n    template: default\r\n  - name: python-barbicanclient\r\n    tags:\r\n      - python\r\n    template: default\r\n```\r\n\r\nThen start the Git indexer manually.\r\n\r\n```Shell\r\npython ~/repoxplorer/bin/repoxplorer-indexer\r\n```\r\n\r\nIn order to run the indexer continuously you can use the command\r\nargument \"--forever\".\r\n\r\nFurthermore you can install the systemd unit file for the indexer.\r\n\r\n```\r\nsudo cp etc/repoxplorer.service /usr/lib/systemd/system/repoxplorer.service\r\n# Be sure to set the correct path to the repoxplorer-indexer script\r\n\r\nsudo systemctl daemon-reload\r\nsudo systemctl start repoxplorer\r\nsudo systemctl status repoxplorer\r\n\r\n# You can check the indexer log via journalctl\r\nsudo journalctl -f\r\n```\r\n\r\n## Start the Web UI\r\n\r\nStart the RepoXplorer web app.\r\n\r\n```Shell\r\nuwsgi --http-socket :8080 --pecan ~/repoxplorer/local/share/repoxplorer/config.py\r\n```\r\n\r\nThen open a Web browser to access http://localhost:8080. You will be faced to a list\r\nof projects such as defined in projects.yaml. A click on one of the project's ids\r\nwill redirect you to the statistics page of the given project.\r\n\r\nFurthermore you can install the systemd unit file for the webui.\r\n\r\n```\r\nsudo cp etc/repoxplorer-webui.service /usr/lib/systemd/system/repoxplorer-webui.service\r\n# Be sure to set the correct path to the uwsgi tool and to the config.py file.\r\n\r\nsudo systemctl daemon-reload\r\nsudo systemctl start repoxplorer-webui\r\nsudo systemctl status repoxplorer-webui\r\n\r\n# You can check the webui log via journalctl\r\nsudo journalctl -f\r\n```\r\n\r\n## Sanitize author identities\r\n\r\nIn the example below all contributions for John Doe will be stacked if\r\nthe author email field of the GIT commit object is one of the defined\r\nemails.\r\n\r\nEdit ~/repoxplorer/local/share/repoxplorer/idents.yaml\r\n\r\n```YAML\r\n---\r\n- name: John Doe\r\n  emails:\r\n    - john.doe@server\r\n    - jdoe@server\r\n```\r\n\r\n## Metadata automatic indexation\r\n\r\nIn addition to the standard Git object fields, the indexer will detect\r\nmetadata such as:\r\n\r\n- close-bug: #123\r\n- implement-feature: bp-new-scheduler\r\n\r\nAll \"key: value\" that match the following regex will be indexed:\r\n\r\n```\r\n'^([a-zA-Z-0-9_-]+):([^//].+)$'\r\n```\r\n\r\n## Use the commits.json REST endpoint to query the internal DB\r\n\r\nThis endpoint is used by the UI to fetch commits listing according\r\nto the filters you have setup in the UI but the endpoint can be also used\r\noutside of the UI. Here are some examples about how to use it:\r\n\r\n```\r\n# Return all commits from repositories included in the designate project\r\ncurl \"http://localhost:8080/commits.json?pid=designate\"\r\n# Return all commits from repositories included in the designate project that\r\n# have a metadata \"Closes-bug\" (whatever the field value)\r\ncurl \"http://localhost:8080/commits.json?pid=designate&metadata=Closes-Bug=*\"\r\n# Return all commits from all project repositories that have the\r\n# metadata \"implement-feature\" that match \"bp-new-scheduler\"\r\ncurl \"http://localhost:8080/commits.json?metadata=implement-bp=bp-new-scheduler\"\r\n# Return all commits from all project repositories that have the\r\n# metadata \"implement-feature\" that match \"bp-new-scheduler\" and\r\n# \"need-qa\" is \"true\"\r\ncurl \"http://localhost:8080/commits.json?metadata=implement-bp=bp-new-scheduler,need-qa=true\"\r\n```\r\n\r\nAvailable arguments are:\r\n- fromdate: epoch\r\n- todate: epoch\r\n- limit: amount of result returned by page (default: 10)\r\n- start: page cursor\r\n- pid: project name as configured in projects.yaml\r\n- tid: tag as configured in the projects.yaml\r\n- cid: contributor id\r\n\r\n## Run tests\r\n\r\n```Shell\r\n./bin/el-start.sh\r\ntox\r\n```\r\n\r\n## Contribute\r\n\r\nRepoXplorer is new and should be considered Alpha ! Feel free to help !\r\nLook at the feature requests list on the Github issue tracker:\r\n\r\n- [Feature requests](https://github.com/morucci/repoxplorer/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement)\r\n\r\nIf you find an issue please fill a bug report here:\r\n\r\n- [Report an issue](https://github.com/morucci/repoxplorer/issues/new)\r\n\r\nRepoXplorer is hosted on this Gerrit instance [Software Factory] (http://softwarefactory-project.io)\r\na contribution should be done via Gerrit instead of using the Pull Request system of Github.\r\n\r\nIf you want to help:\r\n\r\n```Shell\r\ngit clone http://softwarefactory-project.io/r/repoxplorer\r\ngit review -s # You should have login on Software Factory using your Github identity first\r\n```\r\n\r\nYour local copy is now configured. Please read the following instructions to\r\nlearn about Git review sub-command [git-review] (http://softwarefactory-project.io/docs/submitpatches.html#initialize-the-git-remote-with-git-review).\r\n\r\n```\r\n# make some changes\r\ngit add -a\r\ngit commit # local commit your changes\r\ngit review # propose your changes on Gerrit\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}